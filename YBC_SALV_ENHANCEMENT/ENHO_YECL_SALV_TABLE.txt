New attributes:
R_CHANGE_SETTINGS	Instance Attribute	Private	Type Ref To	YCL_SALV_CHANGE_SETTINGS
R_DYNPRO	Instance Attribute	Private	Type Ref To	CL_GUI_CONTAINER



New methods:
FACTORY2	Static Method	Public
GET_TABLE_BY_OBJECT	Static Method	Public
GET_CELL_VALUE	Instance Method	Public
GET_CHANGE_SETTINGS	Instance Method	Public
GET_CONTAINER	Instance Method	Public
GET_DATA	Instance Method	Public
GET_DATA_ROW	Instance Method	Public
GET_GRID	Instance Method	Public
SET_CELL_VALUE	Instance Method	Public
_CACHE_TABLES	Static Method	Private
_TO_READ_ONLY_REF	Instance Method	Private



Post-Methods for:
FACTORY
DISPLAY



Method parameters FACTORY2:
R_SALV_TABLE	Exporting	Type Ref To	CL_SALV_TABLE
T_TABLE	Changing	Type	TABLE



Method parameters GET_TABLE_BY_OBJECT:
I_OBJECT	Importing	Type Ref To	OBJECT
RESULT	Returning	Type Ref To	CL_SALV_TABLE



Method parameters GET_CELL_VALUE:
I_ROW_ID	Importing	Type	I
I_COLUMN	Importing	Type	CSEQUENCE
RESULT	Returning	Type	STRING



Method parameters GET_CHANGE_SETTINGS:
RESULT	Returning	Type Ref To	YCL_SALV_CHANGE_SETTINGS



Method parameters GET_CONTAINER:
RESULT	Returning	Type Ref To	CL_GUI_CONTAINER



Method parameters GET_DATA:
RESULT	Returning	Type Ref To	DATA



Method parameters GET_DATA:
ROW	Importing	Type	I
RESULT	Returning	Type Ref To	DATA



Method parameters GET_GRID:
RESULT	Returning	Type Ref To	CL_GUI_ALV_GRID



Method parameters SET_CELL_VALUE:
I_ROW_ID	Importing	Type	I
I_COLUMN	Importing	Type	CSEQUENCE
I_VALUE	Importing	Type	SIMPLE



Method exceptions SET_CELL_VALUE:
CX_SY_CONVERSION_ERROR



Method parameters _CACHE_TABLES:
I_TABLE	Importing	Type Ref To	CL_SALV_TABLE		(Optional)
I_OBJECT	Importing	Type Ref To	OBJECT		(Optional)
RESULT	Returning	Type Ref To	CL_SALV_TABLE



Method parameters _TO_READ_ONLY_REF:
I_DATA	Importing	Type	DATA
RESULT	Returning	Type Ref To	DATA



METHOD factory2 .

  DATA: lo_dynpro TYPE REF TO object
      , lo_container TYPE REF TO cl_gui_container
      , lx_root TYPE REF TO cx_root
      .


  IF cl_salv_model=>is_offline( ) NE if_salv_c_bool_sap=>true.
    TRY.
        CALL METHOD ('YCF_OO_DYNPRO')=>create_dynpro
          RECEIVING
            result = lo_dynpro.
        lo_container ?= lo_dynpro.

      CATCH cx_sy_dyn_call_error cx_sy_move_cast_error INTO lx_root.
        " message in case of missing objects
        MESSAGE lx_root TYPE 'E'.
    ENDTRY.
  ENDIF.

  TRY.
      IF lo_container IS BOUND.
        CALL METHOD factory
          EXPORTING
            r_container  = lo_container
          IMPORTING
            r_salv_table = r_salv_table
          CHANGING
            t_table      = t_table.

      ELSE.
        CALL METHOD factory
          IMPORTING
            r_salv_table = r_salv_table
          CHANGING
            t_table      = t_table.
      ENDIF.

      r_salv_table->r_dynpro = lo_container.

    CATCH cx_salv_msg.                                  "#EC NO_HANDLER
  ENDTRY.

ENDMETHOD.



METHOD get_table_by_object .

  result = _cache_tables( i_object = i_object ).

ENDMETHOD.



METHOD get_cell_value .

  DATA: lr_data TYPE REF TO data
      .

  FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE
               , <lv_data> TYPE data
               .


  IF r_table IS NOT BOUND.
    RETURN.
  ENDIF.

  ASSIGN r_table->* TO <lt_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  READ TABLE <lt_data>
        INDEX i_row_id
        REFERENCE INTO lr_data.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  ASSIGN lr_data->* TO <lv_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  ASSIGN COMPONENT i_column OF STRUCTURE <lv_data> TO <lv_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  result = <lv_data>.

ENDMETHOD.



METHOD get_change_settings .

  IF r_change_settings IS INITIAL.
    CREATE OBJECT r_change_settings
      EXPORTING
        i_controller = r_controller.

    IF r_container IS NOT BOUND.
      r_change_settings->_on_grid_created( ).
    ENDIF.
  ENDIF.

  result = r_change_settings.

ENDMETHOD.



METHOD get_container .

  result = r_container.

ENDMETHOD.



METHOD get_data .

  FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE
               .


  IF r_table IS BOUND.
    ASSIGN r_table->* TO <lt_data>.
    IF sy-subrc EQ 0.
      result = _to_read_only_ref( <lt_data> ).
    ENDIF.
  ENDIF.

ENDMETHOD.



METHOD get_data_row .

  DATA: lr_data TYPE REF TO data.

  FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE,
                 <ls_data> TYPE data.


  IF r_table IS BOUND.
    ASSIGN r_table->* TO <lt_data>.
    IF sy-subrc EQ 0.
      READ TABLE <lt_data>
            REFERENCE INTO lr_data
            INDEX row.
      IF lr_data IS BOUND.
        ASSIGN lr_data->* TO <ls_data>.
        result = _to_read_only_ref( <ls_data> ).
      ENDIF.
    ENDIF.
  ENDIF.

ENDMETHOD.



METHOD get_grid .

  DATA: lo_adapter_grid TYPE REF TO cl_salv_grid_adapter
      , lo_adapter_full TYPE REF TO cl_salv_fullscreen_adapter
      .


  IF r_controller->r_adapter IS BOUND.
    CASE r_controller->r_adapter->type.
      WHEN if_salv_adapter=>c_adapter_type_fullscreen.
        lo_adapter_full ?= r_controller->r_adapter.
        result = lo_adapter_full->get_grid( ).

      WHEN if_salv_adapter=>c_adapter_type_grid.
        lo_adapter_grid ?= r_controller->r_adapter.
        result = lo_adapter_grid->get_grid( ).
    ENDCASE.
  ENDIF.

  IF result IS BOUND AND result->is_alive( ) EQ cl_gui_control=>state_dead.
    FREE result.
  ENDIF.

ENDMETHOD.



METHOD set_cell_value .

  DATA: lr_data TYPE REF TO data
      .

  FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE
               , <lv_data> TYPE data
               .


  IF r_table IS NOT BOUND.
    RETURN.
  ENDIF.

  ASSIGN r_table->* TO <lt_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  READ TABLE <lt_data>
        INDEX i_row_id
        REFERENCE INTO lr_data.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  ASSIGN lr_data->* TO <lv_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  ASSIGN COMPONENT i_column OF STRUCTURE <lv_data> TO <lv_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  <lv_data> = i_value.

ENDMETHOD.



METHOD _cache_tables .

  STATICS: st_tables TYPE STANDARD TABLE OF REF TO cl_abap_weak_reference.

  DATA: lo_ref TYPE REF TO cl_abap_weak_reference
      , lo_table TYPE REF TO cl_salv_table
      .


  IF i_table IS BOUND.
    CREATE OBJECT lo_ref
      EXPORTING
        oref = i_table.
    INSERT lo_ref INTO TABLE st_tables.

  ELSEIF i_object IS BOUND.
    LOOP AT st_tables INTO lo_ref.
      lo_table ?= lo_ref->get( ).

      IF lo_table IS BOUND.
        CASE i_object.
          WHEN lo_table->r_aggregations
            OR lo_table->r_change_settings
            OR lo_table->r_columns
            OR lo_table->r_container
            OR lo_table->r_controller
            OR lo_table->r_display_settings
            OR lo_table->r_events
            OR lo_table->r_filters
            OR lo_table->r_footer
            OR lo_table->r_functional_settings
            OR lo_table->r_functions
            OR lo_table->r_header
            OR lo_table->r_layout
            OR lo_table->r_print
            OR lo_table->r_selections
            OR lo_table->r_sorts
            OR lo_table->get_grid( ).
            result = lo_table.
            RETURN.
        ENDCASE.

      ELSE.
        DELETE st_tables.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDMETHOD.



METHOD _to_read_only_ref .

  " as i_DATA is an importing parameter, the reference is protected against changes
  GET REFERENCE OF i_data INTO result.

ENDMETHOD.



CLASS lcl_yecl_salv_table DEFINITION DEFERRED.
CLASS cl_salv_table DEFINITION LOCAL FRIENDS lcl_yecl_salv_table.
*----------------------------------------------------------------------*
*       CLASS lcl_yecl_salv_table DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_yecl_salv_table DEFINITION.

  PUBLIC SECTION.
    CLASS-DATA obj TYPE REF TO lcl_yecl_salv_table.         "#EC NEEDED
    DATA core_object TYPE REF TO cl_salv_table .            "#EC NEEDED

 INTERFACES  IPO_YECL_SALV_TABLE.
    METHODS:
      constructor
        IMPORTING core_object TYPE REF TO cl_salv_table OPTIONAL.

ENDCLASS.                    "lcl_yecl_salv_table DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_yecl_salv_table IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_yecl_salv_table IMPLEMENTATION.

  METHOD constructor.
    me->core_object = core_object.
  ENDMETHOD.                    "constructor

  METHOD ipo_yecl_salv_table~factory.
*"------------------------------------------------------------------------*
*" Declaration of POST-method, do not insert any comments here please!
*"
*"class-methods FACTORY
*"  importing
*"    !LIST_DISPLAY type SAP_BOOL optional
*"    !R_CONTAINER type ref to CL_GUI_CONTAINER optional
*"    !CONTAINER_NAME type STRING optional
*"  changing
*"    !R_SALV_TABLE type ref to CL_SALV_TABLE
*"    !T_TABLE type TABLE
*"  raising
*"    CX_SALV_MSG .
*"------------------------------------------------------------------------*

    cl_salv_table=>_cache_tables( i_table = r_salv_table ).
    r_salv_table->get_change_settings( ).

    IF r_salv_table->r_container IS BOUND.
      cl_salv_controller_events=>init_uifunction( r_salv_table ).
    ENDIF.

  ENDMETHOD.                    "ipo_yecl_salv_table~factory

  METHOD ipo_yecl_salv_table~display.
*"------------------------------------------------------------------------*
*" Declaration of POST-method, do not insert any comments here please!
*"
*"methods DISPLAY .
*"------------------------------------------------------------------------*

    DATA: lo_settings TYPE REF TO ycl_salv_change_settings
        , lx_root TYPE REF TO cx_root
        .


    IF core_object->r_dynpro IS BOUND.
      TRY.
          CALL METHOD core_object->r_dynpro->('YIF_OO_DYNPRO~CALL_DYNPRO').

        CATCH cx_sy_dyn_call_error INTO lx_root.
          " message in case of missing objects
          MESSAGE lx_root TYPE 'E'.
      ENDTRY.
    ENDIF.

    IF core_object->r_container IS BOUND.
      core_object->r_change_settings->check_changed_data( ).
    ENDIF.

  ENDMETHOD.                    "ipo_yecl_salv_table~display

ENDCLASS.