New attributes:
GO_CHANGE_SETTINGS	Instance Attribute	Private	Type Ref To	ZCL_SALV_CHANGE_SETTINGS



New methods:
GET_CELL_VALUE	Instance Method	Public
GET_CHANGE_SETTINGS	Instance Method	Public
GET_DATA	Instance Method	Public
GET_GRID	Instance Method	Public
SET_CELL_VALUE	Instance Method	Public
_TO_READ_ONLY_REF	Instance Method	Private



Pre-Methods for:
DISPLAY



Post-Methods for:
DISPLAY



Method parameters GET_CELL_VALUE:
I_ROW_ID	Importing	Type	I
I_COLUMN	Importing	Type	CSEQUENCE
RESULT	Returning	Type	STRING



Method parameters GET_CHANGE_SETTINGS:
RESULT	Returning	Type Ref To	ZCL_SALV_CHANGE_SETTINGS



Method parameters GET_DATA:
RESULT	Returning	Type Ref To	DATA



Method parameters GET_GRID:
RESULT	Returning	Type Ref To	CL_GUI_ALV_GRID



Method parameters SET_CELL_VALUE:
I_ROW_ID	Importing	Type	I
I_COLUMN	Importing	Type	CSEQUENCE
I_VALUE	Importing	Type	SIMPLE



Method exceptions SET_CELL_VALUE:
CX_SY_CONVERSION_ERROR



Method parameters _TO_READ_ONLY_REF:
I_DATA	Importing	Type	DATA
RESULT	Returning	Type Ref To	DATA



METHOD get_cell_value .

  DATA: lr_data TYPE REF TO data
      .

  FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE
               , <lv_data> TYPE data
               .


  IF r_table IS NOT BOUND.
    RETURN.
  ENDIF.

  ASSIGN r_table->* TO <lt_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  READ TABLE <lt_data>
        INDEX i_row_id
        REFERENCE INTO lr_data.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  ASSIGN lr_data->* TO <lv_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  ASSIGN COMPONENT i_column OF STRUCTURE <lv_data> TO <lv_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  result = <lv_data>.

ENDMETHOD.



METHOD get_change_settings .

  IF go_change_settings IS INITIAL.
    CREATE OBJECT go_change_settings
      EXPORTING
        i_controller = r_controller
        i_container  = r_container.
  ENDIF.

  result = go_change_settings.

ENDMETHOD.



METHOD get_data .

  FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE
               .


  IF r_table IS BOUND.
    ASSIGN r_table->* TO <lt_data>.
    IF sy-subrc EQ 0.
      result ?= _to_read_only_ref( <lt_data> ).
    ENDIF.
  ENDIF.

ENDMETHOD.



METHOD get_grid .

  DATA: lr_adapter_grid TYPE REF TO cl_salv_grid_adapter
      , lr_adapter_full TYPE REF TO cl_salv_fullscreen_adapter
      .


  IF r_controller->r_adapter IS BOUND.
    CASE r_controller->r_adapter->type.
      WHEN if_salv_adapter=>c_adapter_type_fullscreen.
        lr_adapter_full ?= r_controller->r_adapter.
        result = lr_adapter_full->get_grid( ).

      WHEN if_salv_adapter=>c_adapter_type_grid.
        lr_adapter_grid ?= r_controller->r_adapter.
        result = lr_adapter_grid->get_grid( ).
    ENDCASE.
  ENDIF.

ENDMETHOD.



METHOD set_cell_value .

  DATA: lr_data TYPE REF TO data
      .

  FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE
               , <lv_data> TYPE data
               .


  IF r_table IS NOT BOUND.
    RETURN.
  ENDIF.

  ASSIGN r_table->* TO <lt_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  READ TABLE <lt_data>
        INDEX i_row_id
        REFERENCE INTO lr_data.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  ASSIGN lr_data->* TO <lv_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  ASSIGN COMPONENT i_column OF STRUCTURE <lv_data> TO <lv_data>.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  <lv_data> = i_value.

ENDMETHOD.



METHOD _to_read_only_ref .

  " as i_DATA is an importing parameter, the reference is protected against changes
  GET REFERENCE OF i_data INTO result.

ENDMETHOD.



CLASS lcl_zbc_salv_table DEFINITION DEFERRED.
CLASS cl_salv_table DEFINITION LOCAL FRIENDS lcl_zbc_salv_table.
*----------------------------------------------------------------------*
*       CLASS lcl_zbc_salv_table DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_zbc_salv_table DEFINITION.

  PUBLIC SECTION.
    CLASS-DATA obj TYPE REF TO lcl_zbc_salv_table.          "#EC NEEDED
    DATA core_object TYPE REF TO cl_salv_table .            "#EC NEEDED

 INTERFACES: IPR_ZBC_SALV_TABLE, IPO_ZBC_SALV_TABLE.
    METHODS:
      constructor
        IMPORTING core_object TYPE REF TO cl_salv_table OPTIONAL.


ENDCLASS.                    "lcl_zbc_salv_table DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_zbc_salv_table IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_zbc_salv_table IMPLEMENTATION.

  METHOD constructor.
    me->core_object = core_object.
  ENDMETHOD.                    "constructor


  METHOD ipr_zbc_salv_table~display.
*"------------------------------------------------------------------------*
*" Declaration of PRE-method, do not insert any comments here please!
*"
*"methods DISPLAY .
*"------------------------------------------------------------------------*

    cl_salv_controller_events=>init_uifunction( core_object ).

  ENDMETHOD.                    "ipr_zbc_salv_table~display

  METHOD ipo_zbc_salv_table~display.
*"------------------------------------------------------------------------*
*" Declaration of POST-method, do not insert any comments here please!
*"
*"methods DISPLAY .
*"------------------------------------------------------------------------*

    DATA: lo_container TYPE REF TO zif_gui_container
        .


    lo_container = zcf_salv_table=>get_container_for_table( core_object ).
    IF lo_container IS BOUND.
      lo_container->display( ).
    ENDIF.

  ENDMETHOD.                    "ipo_zbc_salv_table~display

ENDCLASS.